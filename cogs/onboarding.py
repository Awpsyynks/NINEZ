import discord
from discord.ext import commands
import json
import logging
from datetime import datetime

logger = logging.getLogger('discord_bot.onboarding')

class RulesView(discord.ui.View):
    """Vue pour accepter les r√®gles"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='‚úÖ J\'accepte les r√®gles', style=discord.ButtonStyle.success, emoji='üìã')
    async def accept_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Accepte les r√®gles et donne acc√®s au serveur"""
        guild = interaction.guild
        user = interaction.user
        
        # R√¥le "Membre V√©rifi√©" 
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")
        if not verified_role:
            # Cr√©e le r√¥le s'il n'existe pas
            verified_role = await guild.create_role(
                name="Membre V√©rifi√©",
                color=0x2ecc71,
                reason="R√¥le pour les membres qui ont accept√© les r√®gles"
            )
        
        # Retire le r√¥le "Non V√©rifi√©" s'il existe
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        if unverified_role and unverified_role in user.roles:
            await user.remove_roles(unverified_role, reason="R√®gles accept√©es")
        
        # Ajoute le r√¥le v√©rifi√©
        await user.add_roles(verified_role, reason="R√®gles accept√©es")
        
        embed = discord.Embed(
            title="üéâ Bienvenue dans la communaut√© !",
            description=f"Merci {user.mention} d'avoir accept√© les r√®gles !\n\nTu peux maintenant acc√©der √† tous les salons du serveur. üöÄ",
            color=0x2ecc71
        )
        embed.add_field(
            name="üéØ Prochaine √©tape",
            value="Va dans le salon **choix-communaut√©** pour nous dire pourquoi tu es l√† !",
            inline=False
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        embed.timestamp = datetime.now()
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        logger.info(f"{user.name} a accept√© les r√®gles")

class CommunityChoiceView(discord.ui.View):
    """Vue pour choisir pourquoi on est sur le serveur"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üí¨ Discuter', style=discord.ButtonStyle.primary, emoji='üí≠')
    async def choice_discuss(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Discuter", "üí¨", 0x3498db, "Tu aimes √©changer et parler avec la communaut√© !")
    
    @discord.ui.button(label='üòÇ Rigoler', style=discord.ButtonStyle.secondary, emoji='ü§£')
    async def choice_laugh(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Rigoler", "üòÇ", 0xf39c12, "Tu es l√† pour t'amuser et faire rire les autres !")
    
    @discord.ui.button(label='üéÆ Jouer', style=discord.ButtonStyle.success, emoji='üïπÔ∏è')
    async def choice_game(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Jouer", "üéÆ", 0x9b59b6, "Tu es un gamer dans l'√¢me !")
    
    @discord.ui.button(label='ü§ù Faire des amis', style=discord.ButtonStyle.danger, emoji='‚ù§Ô∏è')
    async def choice_friends(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Faire des amis", "ü§ù", 0xe91e63, "Tu cherches √† cr√©er des liens avec la communaut√© !")
    
    @discord.ui.button(label='üìö Apprendre', style=discord.ButtonStyle.primary, emoji='üß†')
    async def choice_learn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Apprendre", "üìö", 0x1abc9c, "Tu es l√† pour d√©couvrir et apprendre de nouvelles choses !")
    
    async def handle_choice(self, interaction, choice_name, emoji, color, description):
        """G√®re le choix de l'utilisateur"""
        user = interaction.user
        guild = interaction.guild
        
        # R√¥le bas√© sur le choix
        role_name = f"{emoji} {choice_name}"
        choice_role = discord.utils.get(guild.roles, name=role_name)
        
        if not choice_role:
            # Cr√©e le r√¥le s'il n'existe pas
            choice_role = await guild.create_role(
                name=role_name,
                color=color,
                reason=f"R√¥le pour les membres qui sont l√† pour {choice_name.lower()}"
            )
        
        # Ajoute le r√¥le
        await user.add_roles(choice_role, reason=f"Choix: {choice_name}")
        
        embed = discord.Embed(
            title=f"{emoji} Excellent choix !",
            description=f"**{user.display_name}**, {description}",
            color=color
        )
        embed.add_field(
            name="üé≠ Ton r√¥le",
            value=f"Tu as maintenant le r√¥le **{role_name}** !",
            inline=True
        )
        embed.add_field(
            name="üåü Avantages",
            value="‚Ä¢ Acc√®s aux salons sp√©cialis√©s\n‚Ä¢ Communaut√© de personnes similaires\n‚Ä¢ √âv√©nements d√©di√©s",
            inline=True
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        embed.set_footer(text="Tu peux changer de r√¥le √† tout moment !")
        embed.timestamp = datetime.now()
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # Message public styl√©
        public_embed = discord.Embed(
            description=f"üéâ **{user.display_name}** nous a rejoint pour **{choice_name.lower()}** ! {emoji}",
            color=color
        )
        await interaction.followup.send(embed=public_embed)
        
        logger.info(f"{user.name} a choisi: {choice_name}")

class Onboarding(commands.Cog):
    """Cog pour l'onboarding et l'accueil des nouveaux membres"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @commands.command(name='setup_rules')
    @commands.has_permissions(administrator=True)
    async def setup_rules(self, ctx, channel: discord.TextChannel = None):
        """Configure le syst√®me de r√®gles avec acceptation"""
        if not channel:
            channel = ctx.channel
        
        # Cr√©ation des r√¥les n√©cessaires
        guild = ctx.guild
        
        # R√¥le "Non V√©rifi√©"
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        if not unverified_role:
            unverified_role = await guild.create_role(
                name="Non V√©rifi√©",
                color=0xe74c3c,
                reason="R√¥le pour les nouveaux membres non v√©rifi√©s"
            )
        
        # R√¥le "Membre V√©rifi√©"
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")
        if not verified_role:
            verified_role = await guild.create_role(
                name="Membre V√©rifi√©",
                color=0x2ecc71,
                reason="R√¥le pour les membres v√©rifi√©s"
            )
        
        # Embed des r√®gles styl√©
        rules_embed = discord.Embed(
            title="üìã R√àGLES DU SERVEUR",
            description="**Bienvenue sur notre serveur !** üéâ\n\nPour acc√©der √† tous les salons, tu dois d'abord accepter nos r√®gles :",
            color=0x3498db
        )
        
        rules_embed.add_field(
            name="1Ô∏è‚É£ Respect",
            value="‚Ä¢ Respecte tous les membres\n‚Ä¢ Pas d'insultes ou de harc√®lement\n‚Ä¢ Sois poli et bienveillant",
            inline=False
        )
        
        rules_embed.add_field(
            name="2Ô∏è‚É£ Contenu",
            value="‚Ä¢ Pas de contenu NSFW\n‚Ä¢ Pas de spam ou flood\n‚Ä¢ Utilise les bons salons",
            inline=False
        )
        
        rules_embed.add_field(
            name="3Ô∏è‚É£ Comportement",
            value="‚Ä¢ Pas de pub sans autorisation\n‚Ä¢ Pas de trolling excessif\n‚Ä¢ √âcoute les mod√©rateurs",
            inline=False
        )
        
        rules_embed.add_field(
            name="4Ô∏è‚É£ Sanctions",
            value="‚Ä¢ 1er avertissement : Warning\n‚Ä¢ 2√®me avertissement : Mute temporaire\n‚Ä¢ 3√®me avertissement : Ban d√©finitif",
            inline=False
        )
        
        rules_embed.add_field(
            name="üéØ Important",
            value="En cliquant sur le bouton ci-dessous, tu acceptes toutes ces r√®gles et tu pourras acc√©der au serveur !",
            inline=False
        )
        
        rules_embed.set_footer(text="Clique sur le bouton pour accepter les r√®gles !")
        rules_embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
        
        view = RulesView()
        await channel.send(embed=rules_embed, view=view)
        
        # Confirmation
        confirm_embed = discord.Embed(
            title="‚úÖ Syst√®me de r√®gles configur√©",
            description=f"Le syst√®me de r√®gles a √©t√© configur√© dans {channel.mention}",
            color=0x2ecc71
        )
        confirm_embed.add_field(
            name="üé≠ R√¥les cr√©√©s",
            value=f"‚Ä¢ {unverified_role.mention} - Nouveaux membres\n‚Ä¢ {verified_role.mention} - Membres v√©rifi√©s",
            inline=False
        )
        await ctx.send(embed=confirm_embed)
        logger.info(f"Syst√®me de r√®gles configur√© dans {channel.name}")
    
    @commands.command(name='setup_community_choice')
    @commands.has_permissions(administrator=True)
    async def setup_community_choice(self, ctx, channel: discord.TextChannel = None):
        """Configure le syst√®me de choix de communaut√©"""
        if not channel:
            channel = ctx.channel
        
        # Embed styl√© pour les choix
        choice_embed = discord.Embed(
            title="üåü CHOIX DE COMMUNAUT√â",
            description="**Dis-nous pourquoi tu es l√† !** üéØ\n\nChaque choix te donnera un r√¥le sp√©cial et l'acc√®s √† des salons d√©di√©s :",
            color=0xf1c40f
        )
        
        choice_embed.add_field(
            name="üí¨ Discuter",
            value="Tu aimes √©changer, d√©battre et parler de tout et de rien avec la communaut√© !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üòÇ Rigoler",
            value="Tu es l√† pour t'amuser, faire des blagues et partager de bons moments !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üéÆ Jouer",
            value="Tu es un gamer et tu cherches des partenaires de jeu ou des discussions gaming !",
            inline=True
        )
        
        choice_embed.add_field(
            name="ü§ù Faire des amis",
            value="Tu veux cr√©er des liens, rencontrer de nouvelles personnes et agrandir ton cercle !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üìö Apprendre",
            value="Tu es curieux et tu veux d√©couvrir, apprendre et partager tes connaissances !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üéÅ Bonus",
            value="‚Ä¢ R√¥le color√© unique\n‚Ä¢ Acc√®s aux salons sp√©cialis√©s\n‚Ä¢ √âv√©nements d√©di√©s\n‚Ä¢ Communaut√© similaire",
            inline=False
        )
        
        choice_embed.set_footer(text="Clique sur le bouton qui te correspond le mieux !")
        choice_embed.set_thumbnail(url=ctx.guild.icon.url if ctx.guild.icon else None)
        
        view = CommunityChoiceView()
        await channel.send(embed=choice_embed, view=view)
        
        # Confirmation
        confirm_embed = discord.Embed(
            title="‚úÖ Syst√®me de choix configur√©",
            description=f"Le syst√®me de choix de communaut√© a √©t√© configur√© dans {channel.mention}",
            color=0x2ecc71
        )
        await ctx.send(embed=confirm_embed)
        logger.info(f"Syst√®me de choix configur√© dans {channel.name}")

    @commands.command(name='verify_member')
    @commands.has_permissions(manage_roles=True)
    async def verify_member(self, ctx, member: discord.Member):
        """V√©rifie manuellement un membre (mod√©rateurs)"""
        guild = ctx.guild

        # R√¥les
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")

        if not verified_role:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Le syst√®me de r√®gles n'est pas configur√©. Utilisez `!setup_rules` d'abord.",
                color=0xe74c3c
            )
            await ctx.send(embed=embed)
            return

        # Retire le r√¥le non v√©rifi√© et ajoute le v√©rifi√©
        if unverified_role and unverified_role in member.roles:
            await member.remove_roles(unverified_role, reason=f"V√©rifi√© manuellement par {ctx.author}")

        await member.add_roles(verified_role, reason=f"V√©rifi√© manuellement par {ctx.author}")

        embed = discord.Embed(
            title="‚úÖ Membre v√©rifi√©",
            description=f"{member.mention} a √©t√© v√©rifi√© manuellement par {ctx.author.mention}",
            color=0x2ecc71
        )
        await ctx.send(embed=embed)
        logger.info(f"{member.name} v√©rifi√© manuellement par {ctx.author.name}")

    @commands.command(name='unverify_member')
    @commands.has_permissions(manage_roles=True)
    async def unverify_member(self, ctx, member: discord.Member):
        """Retire la v√©rification d'un membre (mod√©rateurs)"""
        guild = ctx.guild

        # R√¥les
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")

        if not unverified_role:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Le syst√®me de r√®gles n'est pas configur√©. Utilisez `!setup_rules` d'abord.",
                color=0xe74c3c
            )
            await ctx.send(embed=embed)
            return

        # Retire le r√¥le v√©rifi√© et ajoute le non v√©rifi√©
        if verified_role and verified_role in member.roles:
            await member.remove_roles(verified_role, reason=f"D√©v√©rifi√© par {ctx.author}")

        await member.add_roles(unverified_role, reason=f"D√©v√©rifi√© par {ctx.author}")

        embed = discord.Embed(
            title="‚ö†Ô∏è Membre d√©v√©rifi√©",
            description=f"{member.mention} a √©t√© d√©v√©rifi√© par {ctx.author.mention}",
            color=0xf39c12
        )
        await ctx.send(embed=embed)
        logger.info(f"{member.name} d√©v√©rifi√© par {ctx.author.name}")

    @commands.command(name='onboarding_stats')
    @commands.has_permissions(manage_guild=True)
    async def onboarding_stats(self, ctx):
        """Affiche les statistiques d'onboarding"""
        guild = ctx.guild

        # Comptage des r√¥les
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")

        unverified_count = len(unverified_role.members) if unverified_role else 0
        verified_count = len(verified_role.members) if verified_role else 0

        # Comptage des choix de communaut√©
        choice_roles = {
            "üí¨ Discuter": 0,
            "üòÇ Rigoler": 0,
            "üéÆ Jouer": 0,
            "ü§ù Faire des amis": 0,
            "üìö Apprendre": 0
        }

        for role_name in choice_roles.keys():
            role = discord.utils.get(guild.roles, name=role_name)
            if role:
                choice_roles[role_name] = len(role.members)

        embed = discord.Embed(
            title="üìä Statistiques d'Onboarding",
            description=f"Statistiques pour **{guild.name}**",
            color=0x3498db
        )

        embed.add_field(
            name="üîê V√©rification",
            value=f"‚Ä¢ **Non v√©rifi√©s** : {unverified_count}\n‚Ä¢ **V√©rifi√©s** : {verified_count}",
            inline=True
        )

        total_choices = sum(choice_roles.values())
        embed.add_field(
            name="üåü Choix de communaut√©",
            value=f"‚Ä¢ **Total avec choix** : {total_choices}",
            inline=True
        )

        embed.add_field(
            name="üìà Taux de conversion",
            value=f"‚Ä¢ **V√©rification** : {(verified_count/(verified_count+unverified_count)*100):.1f}%" if (verified_count+unverified_count) > 0 else "N/A",
            inline=True
        )

        # D√©tail des choix
        choices_text = ""
        for choice, count in choice_roles.items():
            percentage = (count/total_choices*100) if total_choices > 0 else 0
            choices_text += f"‚Ä¢ **{choice}** : {count} ({percentage:.1f}%)\n"

        if choices_text:
            embed.add_field(
                name="üéØ R√©partition des choix",
                value=choices_text,
                inline=False
            )

        embed.set_footer(text=f"Total membres : {guild.member_count}")
        embed.timestamp = datetime.now()

        await ctx.send(embed=embed)

    @commands.command(name='reset_choice')
    async def reset_choice(self, ctx):
        """Permet √† un utilisateur de changer son choix de communaut√©"""
        user = ctx.author
        guild = ctx.guild

        # Retire tous les r√¥les de choix existants
        choice_role_names = ["üí¨ Discuter", "üòÇ Rigoler", "üéÆ Jouer", "ü§ù Faire des amis", "üìö Apprendre"]
        removed_roles = []

        for role_name in choice_role_names:
            role = discord.utils.get(guild.roles, name=role_name)
            if role and role in user.roles:
                await user.remove_roles(role, reason="Reset du choix de communaut√©")
                removed_roles.append(role_name)

        if removed_roles:
            embed = discord.Embed(
                title="üîÑ Choix r√©initialis√©",
                description=f"Tes anciens r√¥les ont √©t√© supprim√©s : {', '.join(removed_roles)}",
                color=0xf39c12
            )
            embed.add_field(
                name="üéØ Prochaine √©tape",
                value="Va dans le salon **choix-communaut√©** pour faire un nouveau choix !",
                inline=False
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Aucun choix √† r√©initialiser",
                description="Tu n'as pas encore fait de choix de communaut√©.",
                color=0x3498db
            )
            embed.add_field(
                name="üéØ Suggestion",
                value="Va dans le salon **choix-communaut√©** pour faire ton choix !",
                inline=False
            )

        await ctx.send(embed=embed)
        logger.info(f"{user.name} a r√©initialis√© son choix de communaut√©")

    @commands.command(name='create_mega_server')
    @commands.has_permissions(administrator=True)
    async def create_mega_server(self, ctx):
        """üöÄ CR√âE UN SERVEUR COMMUNAUTAIRE ULTRA-COMPLET AUTOMATIQUEMENT !"""
        guild = ctx.guild

        # Message de d√©but
        embed = discord.Embed(
            title="üöÄ CR√âATION DU MEGA-SERVEUR COMMUNAUTAIRE",
            description="**Cr√©ation automatique d'un serveur communautaire complet !**\n\n‚è≥ Cela peut prendre quelques minutes...",
            color=0xf1c40f
        )
        embed.add_field(
            name="üéØ Ce qui va √™tre cr√©√©",
            value="‚Ä¢ **15+ cat√©gories** th√©matiques\n‚Ä¢ **50+ salons** texte et vocal\n‚Ä¢ **20+ r√¥les** color√©s\n‚Ä¢ **Permissions** optimis√©es\n‚Ä¢ **Syst√®me d'onboarding** complet",
            inline=False
        )
        message = await ctx.send(embed=embed)

        # Cr√©er tous les r√¥les n√©cessaires d'abord
        await self.create_all_roles(guild, message)

        # Cr√©er toutes les cat√©gories et salons
        await self.create_all_categories_and_channels(guild, message)

        # Configuration finale
        await self.setup_final_configuration(ctx, guild, message)

    async def create_all_roles(self, guild, message):
        """Cr√©e tous les r√¥les n√©cessaires"""
        embed = discord.Embed(
            title="üé≠ CR√âATION DES R√îLES",
            description="Cr√©ation de tous les r√¥les color√©s et fonctionnels...",
            color=0x9b59b6
        )
        await message.edit(embed=embed)

        # R√¥les de base
        base_roles = [
            {"name": "üëë Fondateur", "color": 0xffd700, "permissions": discord.Permissions.all()},
            {"name": "üõ°Ô∏è Administrateur", "color": 0xe74c3c, "permissions": discord.Permissions(administrator=True)},
            {"name": "‚öîÔ∏è Mod√©rateur", "color": 0x3498db, "permissions": discord.Permissions(manage_messages=True, manage_roles=True, kick_members=True)},
            {"name": "üéØ Helper", "color": 0x2ecc71, "permissions": discord.Permissions(manage_messages=True)},
            {"name": "ü§ñ Bot", "color": 0x95a5a6, "permissions": discord.Permissions.none()},
        ]

        # R√¥les de communaut√© (avec couleurs styl√©es)
        community_roles = [
            {"name": "üí¨ Discuteur", "color": 0x3498db},
            {"name": "üòÇ Rigoleur", "color": 0xf39c12},
            {"name": "üéÆ Gamer", "color": 0x9b59b6},
            {"name": "ü§ù Social", "color": 0xe91e63},
            {"name": "üìö Intellectuel", "color": 0x1abc9c},
            {"name": "üéµ M√©lomane", "color": 0xff6b6b},
            {"name": "üé® Cr√©atif", "color": 0xfeca57},
            {"name": "üíª D√©veloppeur", "color": 0x48dbfb},
            {"name": "üì± Tech", "color": 0x0abde3},
            {"name": "üèÉ Sportif", "color": 0x00d2d3},
        ]

        # R√¥les de niveau
        level_roles = [
            {"name": "üåü Niveau 10", "color": 0xf1c40f},
            {"name": "üíé Niveau 25", "color": 0x3498db},
            {"name": "üèÜ Niveau 50", "color": 0x9b59b6},
            {"name": "üëë Niveau 100", "color": 0xe74c3c},
        ]

        # R√¥les sp√©ciaux
        special_roles = [
            {"name": "üéÇ Anniversaire", "color": 0xff69b4},
            {"name": "üéâ √âv√©nement", "color": 0xffa500},
            {"name": "üí∞ VIP", "color": 0xffd700},
            {"name": "üîá Muted", "color": 0x95a5a6},
            {"name": "‚è≥ Non V√©rifi√©", "color": 0xe74c3c},
            {"name": "‚úÖ Membre V√©rifi√©", "color": 0x2ecc71},
        ]

        all_roles = base_roles + community_roles + level_roles + special_roles

        for role_data in all_roles:
            existing_role = discord.utils.get(guild.roles, name=role_data["name"])
            if not existing_role:
                try:
                    permissions = role_data.get("permissions", discord.Permissions.none())
                    await guild.create_role(
                        name=role_data["name"],
                        color=role_data["color"],
                        permissions=permissions,
                        reason="Cr√©ation automatique du mega-serveur"
                    )
                except Exception as e:
                    logger.error(f"Erreur cr√©ation r√¥le {role_data['name']}: {e}")

    async def create_all_categories_and_channels(self, guild, message):
        """Cr√©e toutes les cat√©gories et salons"""
        embed = discord.Embed(
            title="üèóÔ∏è CR√âATION DES SALONS",
            description="Cr√©ation de toutes les cat√©gories et salons...",
            color=0x3498db
        )
        await message.edit(embed=embed)

        # R√©cup√©rer les r√¥les cr√©√©s
        verified_role = discord.utils.get(guild.roles, name="‚úÖ Membre V√©rifi√©")
        unverified_role = discord.utils.get(guild.roles, name="‚è≥ Non V√©rifi√©")
        muted_role = discord.utils.get(guild.roles, name="üîá Muted")

        # Permissions de base
        base_overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, manage_channels=True)
        }

        if verified_role:
            base_overwrites[verified_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

        if muted_role:
            base_overwrites[muted_role] = discord.PermissionOverwrite(send_messages=False, add_reactions=False)

        # 1. CAT√âGORIE ONBOARDING
        await self.create_onboarding_category(guild, unverified_role, verified_role)

        # 2. CAT√âGORIE INFORMATIONS
        await self.create_info_category(guild, base_overwrites)

        # 3. CAT√âGORIE DISCUSSION G√âN√âRALE
        await self.create_general_category(guild, base_overwrites)

        # 4. CAT√âGORIE GAMING
        await self.create_gaming_category(guild, base_overwrites)

        # 5. CAT√âGORIE CR√âATIVIT√â
        await self.create_creative_category(guild, base_overwrites)

        # 6. CAT√âGORIE D√âTENTE
        await self.create_chill_category(guild, base_overwrites)

        # 7. CAT√âGORIE VOCAL G√âN√âRAL
        await self.create_voice_general_category(guild, base_overwrites)

        # 8. CAT√âGORIE VOCAL GAMING
        await self.create_voice_gaming_category(guild, base_overwrites)

        # 9. CAT√âGORIE √âV√âNEMENTS
        await self.create_events_category(guild, base_overwrites)

        # 10. CAT√âGORIE MOD√âRATION
        await self.create_moderation_category(guild)

    async def create_onboarding_category(self, guild, unverified_role, verified_role):
        """Cr√©e la cat√©gorie d'onboarding"""
        category = await self.get_or_create_category(guild, "üìã ACCUEIL & R√àGLES")

        # Permissions sp√©ciales pour l'onboarding
        public_overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }

        verified_overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }
        if verified_role:
            verified_overwrites[verified_role] = discord.PermissionOverwrite(read_messages=True, send_messages=False)

        channels = [
            {"name": "üëã-bienvenue", "topic": "üéâ Messages de bienvenue automatiques !", "overwrites": public_overwrites},
            {"name": "üìã-r√®gles", "topic": "üìú Accepte les r√®gles pour acc√©der au serveur !", "overwrites": public_overwrites},
            {"name": "üåü-choix-communaut√©", "topic": "üéØ Choisis ton type de membre et re√ßois ton r√¥le color√© !", "overwrites": verified_overwrites},
            {"name": "üì¢-annonces", "topic": "üì£ Annonces importantes du serveur", "overwrites": public_overwrites},
            {"name": "üÜï-nouveaut√©s", "topic": "‚ú® Nouvelles fonctionnalit√©s et mises √† jour", "overwrites": public_overwrites},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], channel_data["overwrites"])

    async def create_info_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie d'informations"""
        category = await self.get_or_create_category(guild, "‚ÑπÔ∏è INFORMATIONS")

        info_overwrites = {**base_overwrites}
        info_overwrites[guild.default_role] = discord.PermissionOverwrite(read_messages=True, send_messages=False)

        channels = [
            {"name": "üìä-statistiques", "topic": "üìà Stats du serveur en temps r√©el"},
            {"name": "üéØ-objectifs", "topic": "üèÜ Objectifs et d√©fis du serveur"},
            {"name": "üîó-liens-utiles", "topic": "üåê Liens importants et ressources"},
            {"name": "‚ùì-faq", "topic": "ü§î Questions fr√©quemment pos√©es"},
            {"name": "üìù-changelog", "topic": "üìã Historique des modifications"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], info_overwrites)

    async def create_general_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie de discussion g√©n√©rale"""
        category = await self.get_or_create_category(guild, "üí¨ DISCUSSION G√âN√âRALE")

        channels = [
            {"name": "üí¨-g√©n√©ral", "topic": "üí≠ Discussion g√©n√©rale pour tous les sujets"},
            {"name": "üó£Ô∏è-d√©bats", "topic": "üéØ D√©bats constructifs et discussions profondes"},
            {"name": "‚ùì-questions", "topic": "ü§î Posez vos questions √† la communaut√©"},
            {"name": "üí°-id√©es", "topic": "üß† Partagez vos id√©es et projets"},
            {"name": "üì∞-actualit√©s", "topic": "üåç Actualit√©s et news du monde"},
            {"name": "üéì-√©ducation", "topic": "üìö Discussions √©ducatives et apprentissage"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], base_overwrites)

    async def create_gaming_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie gaming"""
        category = await self.get_or_create_category(guild, "üéÆ GAMING")

        channels = [
            {"name": "üéÆ-g√©n√©ral-gaming", "topic": "üïπÔ∏è Discussion g√©n√©rale sur les jeux vid√©o"},
            {"name": "üî•-nouveaut√©s-jeux", "topic": "‚ú® Nouveaux jeux et sorties"},
            {"name": "üë•-recherche-√©quipe", "topic": "ü§ù Trouvez des partenaires de jeu"},
            {"name": "üèÜ-comp√©titions", "topic": "‚öîÔ∏è Tournois et comp√©titions"},
            {"name": "üì±-mobile-gaming", "topic": "üì≤ Jeux mobiles et discussions"},
            {"name": "üíª-pc-gaming", "topic": "üñ•Ô∏è Gaming PC, configs et optimisation"},
            {"name": "üéØ-fps-games", "topic": "üî´ FPS: CS:GO, Valorant, COD..."},
            {"name": "‚öîÔ∏è-moba-games", "topic": "üõ°Ô∏è MOBA: LoL, Dota, Heroes..."},
            {"name": "üè∞-mmorpg", "topic": "üó°Ô∏è MMORPG et jeux de r√¥le"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], base_overwrites)

    async def create_creative_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie cr√©ativit√©"""
        category = await self.get_or_create_category(guild, "üé® CR√âATIVIT√â")

        channels = [
            {"name": "üé®-galerie-art", "topic": "üñºÔ∏è Partagez vos cr√©ations artistiques"},
            {"name": "üì∏-photographie", "topic": "üì∑ Photos et techniques de photographie"},
            {"name": "üéµ-musique", "topic": "üé∂ Musique, compositions et d√©couvertes"},
            {"name": "‚úçÔ∏è-√©criture", "topic": "üìù √âcriture cr√©ative et litt√©rature"},
            {"name": "üé¨-vid√©os", "topic": "üé• Cr√©ations vid√©o et montage"},
            {"name": "üíª-programmation", "topic": "‚å®Ô∏è Code, projets et d√©veloppement"},
            {"name": "üèóÔ∏è-projets", "topic": "üî® Vos projets en cours et collaborations"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], base_overwrites)

    async def create_chill_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie d√©tente"""
        category = await self.get_or_create_category(guild, "üòé D√âTENTE & FUN")

        channels = [
            {"name": "üòÇ-memes", "topic": "ü§£ Memes et images dr√¥les"},
            {"name": "üé≠-blagues", "topic": "üòÑ Blagues et humour"},
            {"name": "üçï-nourriture", "topic": "üçî Cuisine et gastronomie"},
            {"name": "üé¨-films-s√©ries", "topic": "üì∫ Cin√©ma et s√©ries TV"},
            {"name": "üìö-livres", "topic": "üìñ Litt√©rature et recommandations"},
            {"name": "üèÉ-sport", "topic": "‚öΩ Sports et activit√©s physiques"},
            {"name": "üåç-voyages", "topic": "‚úàÔ∏è Voyages et d√©couvertes"},
            {"name": "üêæ-animaux", "topic": "üê± Photos et histoires d'animaux"},
            {"name": "üé≤-jeux-bot", "topic": "ü§ñ Commandes du bot et mini-jeux"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], base_overwrites)

    async def create_voice_general_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie vocal g√©n√©rale"""
        category = await self.get_or_create_category(guild, "üîä VOCAL G√âN√âRAL")

        voice_channels = [
            "üé§ Salon Principal",
            "üí¨ Discussion Libre",
            "üéµ Musique & Chill",
            "üìö √âtude Silencieuse",
            "ü§ù Rencontres",
            "üåô Nocturne",
        ]

        for channel_name in voice_channels:
            await self.get_or_create_voice_channel(guild, channel_name, category, base_overwrites)

    async def create_voice_gaming_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie vocal gaming"""
        category = await self.get_or_create_category(guild, "üéÆ VOCAL GAMING")

        voice_channels = [
            "üéØ Gaming G√©n√©ral",
            "‚öîÔ∏è √âquipe 1",
            "üõ°Ô∏è √âquipe 2",
            "üèÜ Comp√©tition",
            "üé≤ Party Games",
            "üì± Mobile Gaming",
            "üíª PC Gaming",
            "üéÆ Console Gaming",
        ]

        for channel_name in voice_channels:
            await self.get_or_create_voice_channel(guild, channel_name, category, base_overwrites)

    async def create_events_category(self, guild, base_overwrites):
        """Cr√©e la cat√©gorie √©v√©nements"""
        category = await self.get_or_create_category(guild, "üéâ √âV√âNEMENTS")

        channels = [
            {"name": "üéÅ-giveaways", "topic": "üéâ Giveaways et concours en cours"},
            {"name": "üé™-√©v√©nements", "topic": "üéä √âv√©nements sp√©ciaux du serveur"},
            {"name": "üèÜ-tournois", "topic": "‚öîÔ∏è Tournois et comp√©titions"},
            {"name": "üéÇ-anniversaires", "topic": "üéà Anniversaires des membres"},
            {"name": "üìÖ-planning", "topic": "üìã Planning des √©v√©nements √† venir"},
            {"name": "üí°-suggestions", "topic": "ü§î Vos suggestions pour le serveur"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], base_overwrites)

    async def create_moderation_category(self, guild):
        """Cr√©e la cat√©gorie mod√©ration (priv√©e)"""
        category = await self.get_or_create_category(guild, "üõ°Ô∏è MOD√âRATION")

        # Permissions pour staff seulement
        admin_role = discord.utils.get(guild.roles, name="üõ°Ô∏è Administrateur")
        mod_role = discord.utils.get(guild.roles, name="‚öîÔ∏è Mod√©rateur")
        helper_role = discord.utils.get(guild.roles, name="üéØ Helper")

        staff_overwrites = {
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }

        if admin_role:
            staff_overwrites[admin_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        if mod_role:
            staff_overwrites[mod_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)
        if helper_role:
            staff_overwrites[helper_role] = discord.PermissionOverwrite(read_messages=True, send_messages=True)

        channels = [
            {"name": "üõ°Ô∏è-staff-g√©n√©ral", "topic": "üíº Discussion g√©n√©rale du staff"},
            {"name": "üìä-logs", "topic": "üìã Logs automatiques du serveur"},
            {"name": "‚ö†Ô∏è-rapports", "topic": "üö® Rapports de mod√©ration"},
            {"name": "üîß-commandes-bot", "topic": "ü§ñ Commandes et tests du bot"},
            {"name": "üìù-notes-membres", "topic": "üìÑ Notes sur les membres"},
        ]

        for channel_data in channels:
            await self.get_or_create_text_channel(guild, channel_data["name"], category, channel_data["topic"], staff_overwrites)

        # Salon vocal staff
        await self.get_or_create_voice_channel(guild, "üõ°Ô∏è R√©union Staff", category, staff_overwrites)

    async def get_or_create_category(self, guild, name):
        """R√©cup√®re ou cr√©e une cat√©gorie"""
        category = discord.utils.get(guild.categories, name=name)
        if not category:
            try:
                category = await guild.create_category(name, reason="Cr√©ation automatique du mega-serveur")
            except Exception as e:
                logger.error(f"Erreur cr√©ation cat√©gorie {name}: {e}")
        return category

    async def get_or_create_text_channel(self, guild, name, category, topic, overwrites):
        """R√©cup√®re ou cr√©e un salon textuel"""
        channel = discord.utils.get(guild.channels, name=name)
        if not channel:
            try:
                channel = await guild.create_text_channel(
                    name,
                    category=category,
                    topic=topic,
                    overwrites=overwrites,
                    reason="Cr√©ation automatique du mega-serveur"
                )
            except Exception as e:
                logger.error(f"Erreur cr√©ation salon {name}: {e}")
        return channel

    async def get_or_create_voice_channel(self, guild, name, category, overwrites):
        """R√©cup√®re ou cr√©e un salon vocal"""
        channel = discord.utils.get(guild.voice_channels, name=name)
        if not channel:
            try:
                channel = await guild.create_voice_channel(
                    name,
                    category=category,
                    overwrites=overwrites,
                    reason="Cr√©ation automatique du mega-serveur"
                )
            except Exception as e:
                logger.error(f"Erreur cr√©ation vocal {name}: {e}")
        return channel

    async def setup_final_configuration(self, ctx, guild, message):
        """Configuration finale du serveur"""
        embed = discord.Embed(
            title="‚öôÔ∏è CONFIGURATION FINALE",
            description="Configuration des syst√®mes automatiques...",
            color=0x2ecc71
        )
        await message.edit(embed=embed)

        # Configuration des syst√®mes automatiques
        rules_channel = discord.utils.get(guild.channels, name="üìã-r√®gles")
        choice_channel = discord.utils.get(guild.channels, name="üåü-choix-communaut√©")
        welcome_channel = discord.utils.get(guild.channels, name="üëã-bienvenue")
        logs_channel = discord.utils.get(guild.channels, name="üìä-logs")
        suggestions_channel = discord.utils.get(guild.channels, name="üí°-suggestions")
        giveaways_channel = discord.utils.get(guild.channels, name="üéÅ-giveaways")

        # Configuration du bot
        if rules_channel:
            await self.setup_rules(ctx, rules_channel)

        if choice_channel:
            await self.setup_community_choice(ctx, choice_channel)

        # Configuration des autres syst√®mes
        if welcome_channel:
            self.bot.config['channels']['welcome'] = welcome_channel.id

        # Sauvegarder la config
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(self.bot.config, f, indent=2, ensure_ascii=False)

        # Message de succ√®s final
        final_embed = discord.Embed(
            title="üéâ MEGA-SERVEUR CR√â√â AVEC SUCC√àS !",
            description="**Votre serveur communautaire ultra-complet est maintenant pr√™t !** üöÄ",
            color=0x00ff00
        )

        final_embed.add_field(
            name="üìä Statistiques de cr√©ation",
            value=f"‚Ä¢ **{len(guild.categories)}** cat√©gories cr√©√©es\n‚Ä¢ **{len(guild.text_channels)}** salons texte\n‚Ä¢ **{len(guild.voice_channels)}** salons vocaux\n‚Ä¢ **{len(guild.roles)}** r√¥les configur√©s",
            inline=False
        )

        final_embed.add_field(
            name="üéØ Cat√©gories principales",
            value="üìã **Accueil & R√®gles** - Onboarding complet\n‚ÑπÔ∏è **Informations** - Stats et infos\nüí¨ **Discussion** - Conversations g√©n√©rales\nüéÆ **Gaming** - Tout pour les gamers\nüé® **Cr√©ativit√©** - Art et projets\nüòé **D√©tente** - Fun et memes\nüîä **Vocal** - Salons vocaux\nüéâ **√âv√©nements** - Giveaways et concours\nüõ°Ô∏è **Mod√©ration** - Outils staff",
            inline=False
        )

        final_embed.add_field(
            name="üöÄ Fonctionnalit√©s activ√©es",
            value="‚úÖ **Syst√®me d'onboarding** automatique\n‚úÖ **R√¥les color√©s** par communaut√©\n‚úÖ **Permissions** optimis√©es\n‚úÖ **Anti-raid** et s√©curit√©\n‚úÖ **√âconomie** et jeux\n‚úÖ **Musique** et divertissement\n‚úÖ **Logs** et mod√©ration\n‚úÖ **Giveaways** et √©v√©nements",
            inline=False
        )

        final_embed.add_field(
            name="üéÆ Pour les gamers",
            value=f"‚Ä¢ **9 salons gaming** sp√©cialis√©s\n‚Ä¢ **8 salons vocaux** pour jouer\n‚Ä¢ R√¥les par jeux favoris\n‚Ä¢ Syst√®me de team building",
            inline=True
        )

        final_embed.add_field(
            name="üí¨ Pour discuter",
            value=f"‚Ä¢ **6 salons discussion** th√©matiques\n‚Ä¢ **6 salons vocaux** g√©n√©raux\n‚Ä¢ D√©bats et questions\n‚Ä¢ Communaut√© active",
            inline=True
        )

        final_embed.add_field(
            name="üé® Pour cr√©er",
            value=f"‚Ä¢ **7 salons cr√©atifs** sp√©cialis√©s\n‚Ä¢ Galerie d'art et projets\n‚Ä¢ Collaboration communautaire\n‚Ä¢ Partage de cr√©ations",
            inline=True
        )

        final_embed.add_field(
            name="üîß Commandes utiles",
            value="`!onboarding_stats` - Statistiques\n`!verify_member @user` - V√©rifier\n`!reset_choice` - Changer de r√¥le\n`!antiraid setup` - S√©curit√©\n`!economy setup` - √âconomie\n`!music setup` - Musique",
            inline=False
        )

        final_embed.set_footer(text="üéâ Votre serveur est maintenant le plus complet de Discord ! Amusez-vous bien !")
        final_embed.set_thumbnail(url=guild.icon.url if guild.icon else None)

        await message.edit(embed=final_embed)
        logger.info(f"Mega-serveur cr√©√© avec succ√®s par {ctx.author.name}")

    @commands.command(name='setup_onboarding_complete')
    @commands.has_permissions(administrator=True)
    async def setup_complete_onboarding(self, ctx):
        """Configuration compl√®te automatique de l'onboarding (version simple)"""
        guild = ctx.guild

        # √âtape 1: Cr√©er les salons n√©cessaires
        embed = discord.Embed(
            title="üöÄ Configuration Onboarding Compl√®te",
            description="Cr√©ation automatique des salons et configuration...",
            color=0x3498db
        )
        message = await ctx.send(embed=embed)

        # Cr√©er la cat√©gorie Onboarding
        onboarding_category = discord.utils.get(guild.categories, name="üìã ONBOARDING")
        if not onboarding_category:
            onboarding_category = await guild.create_category(
                "üìã ONBOARDING",
                reason="Cat√©gorie pour l'onboarding automatique"
            )

        # Cr√©er le salon des r√®gles
        rules_channel = discord.utils.get(guild.channels, name="r√®gles")
        if not rules_channel:
            # Permissions pour le salon des r√®gles
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            rules_channel = await guild.create_text_channel(
                "r√®gles",
                category=onboarding_category,
                overwrites=overwrites,
                topic="üìã Accepte les r√®gles pour acc√©der au serveur !",
                reason="Salon des r√®gles automatique"
            )

        # Cr√©er le salon de choix de communaut√©
        choice_channel = discord.utils.get(guild.channels, name="choix-communaut√©")
        if not choice_channel:
            # Permissions pour le salon de choix (seulement membres v√©rifi√©s)
            verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            if verified_role:
                overwrites[verified_role] = discord.PermissionOverwrite(read_messages=True, send_messages=False)

            choice_channel = await guild.create_text_channel(
                "choix-communaut√©",
                category=onboarding_category,
                overwrites=overwrites,
                topic="üåü Dis-nous pourquoi tu es l√† et re√ßois ton r√¥le color√© !",
                reason="Salon de choix de communaut√© automatique"
            )

        # Cr√©er le salon de bienvenue si n√©cessaire
        welcome_channel = discord.utils.get(guild.channels, name="bienvenue")
        if not welcome_channel:
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            welcome_channel = await guild.create_text_channel(
                "bienvenue",
                category=onboarding_category,
                overwrites=overwrites,
                topic="üéâ Messages de bienvenue pour les nouveaux membres !",
                reason="Salon de bienvenue automatique"
            )

        # Configuration automatique
        await self.setup_rules(ctx, rules_channel)
        await self.setup_community_choice(ctx, choice_channel)

        # Configuration du bienvenue
        self.bot.config['channels']['welcome'] = welcome_channel.id
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(self.bot.config, f, indent=2, ensure_ascii=False)

        # Message de confirmation final
        final_embed = discord.Embed(
            title="‚úÖ Onboarding Configur√© avec Succ√®s !",
            description="Votre syst√®me d'onboarding complet est maintenant actif ! üéâ",
            color=0x2ecc71
        )

        final_embed.add_field(
            name="üìã Salons cr√©√©s",
            value=f"‚Ä¢ {rules_channel.mention} - R√®gles interactives\n‚Ä¢ {choice_channel.mention} - Choix de communaut√©\n‚Ä¢ {welcome_channel.mention} - Messages de bienvenue",
            inline=False
        )

        final_embed.add_field(
            name="üéØ Fonctionnement",
            value="1. Nouveau membre arrive ‚Üí R√¥le 'Non V√©rifi√©'\n2. Va dans r√®gles ‚Üí Accepte ‚Üí R√¥le 'Membre V√©rifi√©'\n3. Va dans choix-communaut√© ‚Üí Choisit ‚Üí R√¥le color√©",
            inline=False
        )

        final_embed.add_field(
            name="üîß Commandes utiles",
            value="`!onboarding_stats` - Voir les statistiques\n`!verify_member @user` - V√©rifier manuellement\n`!reset_choice` - Changer son choix\n`!create_mega_server` - Cr√©er un serveur complet !",
            inline=False
        )

        final_embed.set_footer(text="Utilisez !create_mega_server pour un serveur ultra-complet !")

        await message.edit(embed=final_embed)
        logger.info(f"Onboarding complet configur√© par {ctx.author.name}")

    @commands.command(name='create_specialized_channels')
    @commands.has_permissions(administrator=True)
    async def create_specialized_channels(self, ctx):
        """Cr√©e des salons sp√©cialis√©s selon les r√¥les de communaut√©"""
        guild = ctx.guild

        embed = discord.Embed(
            title="üéØ CR√âATION DE SALONS SP√âCIALIS√âS",
            description="Cr√©ation de salons priv√©s pour chaque communaut√©...",
            color=0x9b59b6
        )
        message = await ctx.send(embed=embed)

        # R√©cup√©rer les r√¥les de communaut√©
        community_roles = [
            {"role": "üí¨ Discuteur", "channels": ["üí¨-salon-discuteurs", "üó£Ô∏è-d√©bats-priv√©s"], "voice": "üí¨ Vocal Discuteurs"},
            {"role": "üòÇ Rigoleur", "channels": ["üòÇ-salon-rigoleurs", "üé≠-blagues-priv√©es"], "voice": "üòÇ Vocal Rigoleurs"},
            {"role": "üéÆ Gamer", "channels": ["üéÆ-salon-gamers", "üèÜ-tournois-priv√©s"], "voice": "üéÆ Vocal Gamers"},
            {"role": "ü§ù Social", "channels": ["ü§ù-salon-sociaux", "üíï-rencontres"], "voice": "ü§ù Vocal Sociaux"},
            {"role": "üìö Intellectuel", "channels": ["üìö-salon-intellectuels", "üß†-r√©flexions"], "voice": "üìö Vocal Intellectuels"},
        ]

        created_channels = []

        for role_data in community_roles:
            role = discord.utils.get(guild.roles, name=role_data["role"])
            if not role:
                continue

            # Cr√©er la cat√©gorie pour ce r√¥le
            category_name = f"üîí {role_data['role'].upper()}"
            category = discord.utils.get(guild.categories, name=category_name)
            if not category:
                category = await guild.create_category(
                    category_name,
                    reason="Cat√©gorie sp√©cialis√©e pour communaut√©"
                )

            # Permissions pour cette communaut√© seulement
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True),
                role: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            # Cr√©er les salons texte
            for channel_name in role_data["channels"]:
                existing_channel = discord.utils.get(guild.channels, name=channel_name)
                if not existing_channel:
                    try:
                        channel = await guild.create_text_channel(
                            channel_name,
                            category=category,
                            overwrites=overwrites,
                            topic=f"Salon priv√© pour les {role_data['role']} !",
                            reason="Salon sp√©cialis√© automatique"
                        )
                        created_channels.append(channel.mention)
                    except Exception as e:
                        logger.error(f"Erreur cr√©ation salon {channel_name}: {e}")

            # Cr√©er le salon vocal
            voice_name = role_data["voice"]
            existing_voice = discord.utils.get(guild.voice_channels, name=voice_name)
            if not existing_voice:
                try:
                    voice_channel = await guild.create_voice_channel(
                        voice_name,
                        category=category,
                        overwrites=overwrites,
                        reason="Vocal sp√©cialis√© automatique"
                    )
                    created_channels.append(f"üîä {voice_channel.name}")
                except Exception as e:
                    logger.error(f"Erreur cr√©ation vocal {voice_name}: {e}")

        # Message de confirmation
        final_embed = discord.Embed(
            title="‚úÖ SALONS SP√âCIALIS√âS CR√â√âS !",
            description="Des salons priv√©s ont √©t√© cr√©√©s pour chaque communaut√© ! üéâ",
            color=0x2ecc71
        )

        if created_channels:
            # Diviser en chunks pour √©viter les limites de Discord
            chunks = [created_channels[i:i+10] for i in range(0, len(created_channels), 10)]
            for i, chunk in enumerate(chunks):
                field_name = f"üéØ Salons cr√©√©s {i+1}" if len(chunks) > 1 else "üéØ Salons cr√©√©s"
                final_embed.add_field(
                    name=field_name,
                    value="\n".join(chunk),
                    inline=False
                )

        final_embed.add_field(
            name="üîí Acc√®s priv√©",
            value="Seuls les membres avec le bon r√¥le peuvent voir ces salons !",
            inline=False
        )

        final_embed.add_field(
            name="üí° Comment √ßa marche",
            value="1. Les membres choisissent leur communaut√©\n2. Ils re√ßoivent le r√¥le correspondant\n3. Ils acc√®dent automatiquement aux salons priv√©s\n4. Ils peuvent discuter avec des personnes similaires !",
            inline=False
        )

        await message.edit(embed=final_embed)
        logger.info(f"Salons sp√©cialis√©s cr√©√©s par {ctx.author.name}")

    @commands.command(name='server_template_info')
    async def server_template_info(self, ctx):
        """Affiche les informations sur les templates de serveur disponibles"""
        embed = discord.Embed(
            title="üèóÔ∏è TEMPLATES DE SERVEUR DISPONIBLES",
            description="Choisissez le template parfait pour votre communaut√© !",
            color=0x3498db
        )

        embed.add_field(
            name="üöÄ `!create_mega_server`",
            value="**SERVEUR ULTRA-COMPLET**\n‚Ä¢ 10+ cat√©gories th√©matiques\n‚Ä¢ 50+ salons texte et vocal\n‚Ä¢ 25+ r√¥les color√©s\n‚Ä¢ Syst√®me d'onboarding complet\n‚Ä¢ Parfait pour grandes communaut√©s",
            inline=False
        )

        embed.add_field(
            name="üéØ `!create_specialized_channels`",
            value="**SALONS SP√âCIALIS√âS**\n‚Ä¢ Salons priv√©s par communaut√©\n‚Ä¢ Acc√®s bas√© sur les r√¥les\n‚Ä¢ Parfait pour segmenter les discussions\n‚Ä¢ Compl√©ment du mega-serveur",
            inline=False
        )

        embed.add_field(
            name="üìã `!setup_onboarding_complete`",
            value="**ONBOARDING SIMPLE**\n‚Ä¢ Syst√®me de r√®gles interactif\n‚Ä¢ Choix de communaut√©\n‚Ä¢ Messages de bienvenue\n‚Ä¢ Parfait pour commencer",
            inline=False
        )

        embed.add_field(
            name="üéÆ Templates sp√©cialis√©s",
            value="**Gaming**: Optimis√© pour les gamers\n**Cr√©atif**: Pour les artistes et cr√©ateurs\n**√âducatif**: Pour l'apprentissage\n**Social**: Pour faire des rencontres",
            inline=False
        )

        embed.add_field(
            name="üí° Recommandations",
            value="‚Ä¢ **Nouveau serveur**: `!create_mega_server`\n‚Ä¢ **Serveur existant**: `!setup_onboarding_complete`\n‚Ä¢ **Communaut√©s actives**: `!create_specialized_channels`",
            inline=False
        )

        embed.set_footer(text="Utilisez les commandes pour cr√©er votre serveur parfait !")

        await ctx.send(embed=embed)

async def setup(bot):
    await bot.add_cog(Onboarding(bot))
