import discord
from discord.ext import commands
import json
import logging
from datetime import datetime

logger = logging.getLogger('discord_bot.onboarding')

class RulesView(discord.ui.View):
    """Vue pour accepter les r√®gles"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='‚úÖ J\'accepte les r√®gles', style=discord.ButtonStyle.success, emoji='üìã')
    async def accept_rules(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Accepte les r√®gles et donne acc√®s au serveur"""
        guild = interaction.guild
        user = interaction.user
        
        # R√¥le "Membre V√©rifi√©" 
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")
        if not verified_role:
            # Cr√©e le r√¥le s'il n'existe pas
            verified_role = await guild.create_role(
                name="Membre V√©rifi√©",
                color=0x2ecc71,
                reason="R√¥le pour les membres qui ont accept√© les r√®gles"
            )
        
        # Retire le r√¥le "Non V√©rifi√©" s'il existe
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        if unverified_role and unverified_role in user.roles:
            await user.remove_roles(unverified_role, reason="R√®gles accept√©es")
        
        # Ajoute le r√¥le v√©rifi√©
        await user.add_roles(verified_role, reason="R√®gles accept√©es")
        
        embed = discord.Embed(
            title="üéâ Bienvenue dans la communaut√© !",
            description=f"Merci {user.mention} d'avoir accept√© les r√®gles !\n\nTu peux maintenant acc√©der √† tous les salons du serveur. üöÄ",
            color=0x2ecc71
        )
        embed.add_field(
            name="üéØ Prochaine √©tape",
            value="Va dans le salon **choix-communaut√©** pour nous dire pourquoi tu es l√† !",
            inline=False
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        embed.timestamp = datetime.now()
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        logger.info(f"{user.name} a accept√© les r√®gles")

class CommunityChoiceView(discord.ui.View):
    """Vue pour choisir pourquoi on est sur le serveur"""
    
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(label='üí¨ Discuter', style=discord.ButtonStyle.primary, emoji='üí≠')
    async def choice_discuss(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Discuter", "üí¨", 0x3498db, "Tu aimes √©changer et parler avec la communaut√© !")
    
    @discord.ui.button(label='üòÇ Rigoler', style=discord.ButtonStyle.secondary, emoji='ü§£')
    async def choice_laugh(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Rigoler", "üòÇ", 0xf39c12, "Tu es l√† pour t'amuser et faire rire les autres !")
    
    @discord.ui.button(label='üéÆ Jouer', style=discord.ButtonStyle.success, emoji='üïπÔ∏è')
    async def choice_game(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Jouer", "üéÆ", 0x9b59b6, "Tu es un gamer dans l'√¢me !")
    
    @discord.ui.button(label='ü§ù Faire des amis', style=discord.ButtonStyle.danger, emoji='‚ù§Ô∏è')
    async def choice_friends(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Faire des amis", "ü§ù", 0xe91e63, "Tu cherches √† cr√©er des liens avec la communaut√© !")
    
    @discord.ui.button(label='üìö Apprendre', style=discord.ButtonStyle.primary, emoji='üß†')
    async def choice_learn(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_choice(interaction, "Apprendre", "üìö", 0x1abc9c, "Tu es l√† pour d√©couvrir et apprendre de nouvelles choses !")
    
    async def handle_choice(self, interaction, choice_name, emoji, color, description):
        """G√®re le choix de l'utilisateur"""
        user = interaction.user
        guild = interaction.guild
        
        # R√¥le bas√© sur le choix
        role_name = f"{emoji} {choice_name}"
        choice_role = discord.utils.get(guild.roles, name=role_name)
        
        if not choice_role:
            # Cr√©e le r√¥le s'il n'existe pas
            choice_role = await guild.create_role(
                name=role_name,
                color=color,
                reason=f"R√¥le pour les membres qui sont l√† pour {choice_name.lower()}"
            )
        
        # Ajoute le r√¥le
        await user.add_roles(choice_role, reason=f"Choix: {choice_name}")
        
        embed = discord.Embed(
            title=f"{emoji} Excellent choix !",
            description=f"**{user.display_name}**, {description}",
            color=color
        )
        embed.add_field(
            name="üé≠ Ton r√¥le",
            value=f"Tu as maintenant le r√¥le **{role_name}** !",
            inline=True
        )
        embed.add_field(
            name="üåü Avantages",
            value="‚Ä¢ Acc√®s aux salons sp√©cialis√©s\n‚Ä¢ Communaut√© de personnes similaires\n‚Ä¢ √âv√©nements d√©di√©s",
            inline=True
        )
        embed.set_thumbnail(url=user.display_avatar.url)
        embed.set_footer(text="Tu peux changer de r√¥le √† tout moment !")
        embed.timestamp = datetime.now()
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # Message public styl√©
        public_embed = discord.Embed(
            description=f"üéâ **{user.display_name}** nous a rejoint pour **{choice_name.lower()}** ! {emoji}",
            color=color
        )
        await interaction.followup.send(embed=public_embed)
        
        logger.info(f"{user.name} a choisi: {choice_name}")

class Onboarding(commands.Cog):
    """Cog pour l'onboarding et l'accueil des nouveaux membres"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @commands.command(name='setup_rules')
    @commands.has_permissions(administrator=True)
    async def setup_rules(self, ctx, channel: discord.TextChannel = None):
        """Configure le syst√®me de r√®gles avec acceptation"""
        if not channel:
            channel = ctx.channel
        
        # Cr√©ation des r√¥les n√©cessaires
        guild = ctx.guild
        
        # R√¥le "Non V√©rifi√©"
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        if not unverified_role:
            unverified_role = await guild.create_role(
                name="Non V√©rifi√©",
                color=0xe74c3c,
                reason="R√¥le pour les nouveaux membres non v√©rifi√©s"
            )
        
        # R√¥le "Membre V√©rifi√©"
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")
        if not verified_role:
            verified_role = await guild.create_role(
                name="Membre V√©rifi√©",
                color=0x2ecc71,
                reason="R√¥le pour les membres v√©rifi√©s"
            )
        
        # Embed des r√®gles styl√©
        rules_embed = discord.Embed(
            title="üìã R√àGLES DU SERVEUR",
            description="**Bienvenue sur notre serveur !** üéâ\n\nPour acc√©der √† tous les salons, tu dois d'abord accepter nos r√®gles :",
            color=0x3498db
        )
        
        rules_embed.add_field(
            name="1Ô∏è‚É£ Respect",
            value="‚Ä¢ Respecte tous les membres\n‚Ä¢ Pas d'insultes ou de harc√®lement\n‚Ä¢ Sois poli et bienveillant",
            inline=False
        )
        
        rules_embed.add_field(
            name="2Ô∏è‚É£ Contenu",
            value="‚Ä¢ Pas de contenu NSFW\n‚Ä¢ Pas de spam ou flood\n‚Ä¢ Utilise les bons salons",
            inline=False
        )
        
        rules_embed.add_field(
            name="3Ô∏è‚É£ Comportement",
            value="‚Ä¢ Pas de pub sans autorisation\n‚Ä¢ Pas de trolling excessif\n‚Ä¢ √âcoute les mod√©rateurs",
            inline=False
        )
        
        rules_embed.add_field(
            name="4Ô∏è‚É£ Sanctions",
            value="‚Ä¢ 1er avertissement : Warning\n‚Ä¢ 2√®me avertissement : Mute temporaire\n‚Ä¢ 3√®me avertissement : Ban d√©finitif",
            inline=False
        )
        
        rules_embed.add_field(
            name="üéØ Important",
            value="En cliquant sur le bouton ci-dessous, tu acceptes toutes ces r√®gles et tu pourras acc√©der au serveur !",
            inline=False
        )
        
        rules_embed.set_footer(text="Clique sur le bouton pour accepter les r√®gles !")
        rules_embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
        
        view = RulesView()
        await channel.send(embed=rules_embed, view=view)
        
        # Confirmation
        confirm_embed = discord.Embed(
            title="‚úÖ Syst√®me de r√®gles configur√©",
            description=f"Le syst√®me de r√®gles a √©t√© configur√© dans {channel.mention}",
            color=0x2ecc71
        )
        confirm_embed.add_field(
            name="üé≠ R√¥les cr√©√©s",
            value=f"‚Ä¢ {unverified_role.mention} - Nouveaux membres\n‚Ä¢ {verified_role.mention} - Membres v√©rifi√©s",
            inline=False
        )
        await ctx.send(embed=confirm_embed)
        logger.info(f"Syst√®me de r√®gles configur√© dans {channel.name}")
    
    @commands.command(name='setup_community_choice')
    @commands.has_permissions(administrator=True)
    async def setup_community_choice(self, ctx, channel: discord.TextChannel = None):
        """Configure le syst√®me de choix de communaut√©"""
        if not channel:
            channel = ctx.channel
        
        # Embed styl√© pour les choix
        choice_embed = discord.Embed(
            title="üåü CHOIX DE COMMUNAUT√â",
            description="**Dis-nous pourquoi tu es l√† !** üéØ\n\nChaque choix te donnera un r√¥le sp√©cial et l'acc√®s √† des salons d√©di√©s :",
            color=0xf1c40f
        )
        
        choice_embed.add_field(
            name="üí¨ Discuter",
            value="Tu aimes √©changer, d√©battre et parler de tout et de rien avec la communaut√© !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üòÇ Rigoler",
            value="Tu es l√† pour t'amuser, faire des blagues et partager de bons moments !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üéÆ Jouer",
            value="Tu es un gamer et tu cherches des partenaires de jeu ou des discussions gaming !",
            inline=True
        )
        
        choice_embed.add_field(
            name="ü§ù Faire des amis",
            value="Tu veux cr√©er des liens, rencontrer de nouvelles personnes et agrandir ton cercle !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üìö Apprendre",
            value="Tu es curieux et tu veux d√©couvrir, apprendre et partager tes connaissances !",
            inline=True
        )
        
        choice_embed.add_field(
            name="üéÅ Bonus",
            value="‚Ä¢ R√¥le color√© unique\n‚Ä¢ Acc√®s aux salons sp√©cialis√©s\n‚Ä¢ √âv√©nements d√©di√©s\n‚Ä¢ Communaut√© similaire",
            inline=False
        )
        
        choice_embed.set_footer(text="Clique sur le bouton qui te correspond le mieux !")
        choice_embed.set_thumbnail(url=ctx.guild.icon.url if ctx.guild.icon else None)
        
        view = CommunityChoiceView()
        await channel.send(embed=choice_embed, view=view)
        
        # Confirmation
        confirm_embed = discord.Embed(
            title="‚úÖ Syst√®me de choix configur√©",
            description=f"Le syst√®me de choix de communaut√© a √©t√© configur√© dans {channel.mention}",
            color=0x2ecc71
        )
        await ctx.send(embed=confirm_embed)
        logger.info(f"Syst√®me de choix configur√© dans {channel.name}")

    @commands.command(name='verify_member')
    @commands.has_permissions(manage_roles=True)
    async def verify_member(self, ctx, member: discord.Member):
        """V√©rifie manuellement un membre (mod√©rateurs)"""
        guild = ctx.guild

        # R√¥les
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")

        if not verified_role:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Le syst√®me de r√®gles n'est pas configur√©. Utilisez `!setup_rules` d'abord.",
                color=0xe74c3c
            )
            await ctx.send(embed=embed)
            return

        # Retire le r√¥le non v√©rifi√© et ajoute le v√©rifi√©
        if unverified_role and unverified_role in member.roles:
            await member.remove_roles(unverified_role, reason=f"V√©rifi√© manuellement par {ctx.author}")

        await member.add_roles(verified_role, reason=f"V√©rifi√© manuellement par {ctx.author}")

        embed = discord.Embed(
            title="‚úÖ Membre v√©rifi√©",
            description=f"{member.mention} a √©t√© v√©rifi√© manuellement par {ctx.author.mention}",
            color=0x2ecc71
        )
        await ctx.send(embed=embed)
        logger.info(f"{member.name} v√©rifi√© manuellement par {ctx.author.name}")

    @commands.command(name='unverify_member')
    @commands.has_permissions(manage_roles=True)
    async def unverify_member(self, ctx, member: discord.Member):
        """Retire la v√©rification d'un membre (mod√©rateurs)"""
        guild = ctx.guild

        # R√¥les
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")

        if not unverified_role:
            embed = discord.Embed(
                title="‚ùå Erreur",
                description="Le syst√®me de r√®gles n'est pas configur√©. Utilisez `!setup_rules` d'abord.",
                color=0xe74c3c
            )
            await ctx.send(embed=embed)
            return

        # Retire le r√¥le v√©rifi√© et ajoute le non v√©rifi√©
        if verified_role and verified_role in member.roles:
            await member.remove_roles(verified_role, reason=f"D√©v√©rifi√© par {ctx.author}")

        await member.add_roles(unverified_role, reason=f"D√©v√©rifi√© par {ctx.author}")

        embed = discord.Embed(
            title="‚ö†Ô∏è Membre d√©v√©rifi√©",
            description=f"{member.mention} a √©t√© d√©v√©rifi√© par {ctx.author.mention}",
            color=0xf39c12
        )
        await ctx.send(embed=embed)
        logger.info(f"{member.name} d√©v√©rifi√© par {ctx.author.name}")

    @commands.command(name='onboarding_stats')
    @commands.has_permissions(manage_guild=True)
    async def onboarding_stats(self, ctx):
        """Affiche les statistiques d'onboarding"""
        guild = ctx.guild

        # Comptage des r√¥les
        unverified_role = discord.utils.get(guild.roles, name="Non V√©rifi√©")
        verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")

        unverified_count = len(unverified_role.members) if unverified_role else 0
        verified_count = len(verified_role.members) if verified_role else 0

        # Comptage des choix de communaut√©
        choice_roles = {
            "üí¨ Discuter": 0,
            "üòÇ Rigoler": 0,
            "üéÆ Jouer": 0,
            "ü§ù Faire des amis": 0,
            "üìö Apprendre": 0
        }

        for role_name in choice_roles.keys():
            role = discord.utils.get(guild.roles, name=role_name)
            if role:
                choice_roles[role_name] = len(role.members)

        embed = discord.Embed(
            title="üìä Statistiques d'Onboarding",
            description=f"Statistiques pour **{guild.name}**",
            color=0x3498db
        )

        embed.add_field(
            name="üîê V√©rification",
            value=f"‚Ä¢ **Non v√©rifi√©s** : {unverified_count}\n‚Ä¢ **V√©rifi√©s** : {verified_count}",
            inline=True
        )

        total_choices = sum(choice_roles.values())
        embed.add_field(
            name="üåü Choix de communaut√©",
            value=f"‚Ä¢ **Total avec choix** : {total_choices}",
            inline=True
        )

        embed.add_field(
            name="üìà Taux de conversion",
            value=f"‚Ä¢ **V√©rification** : {(verified_count/(verified_count+unverified_count)*100):.1f}%" if (verified_count+unverified_count) > 0 else "N/A",
            inline=True
        )

        # D√©tail des choix
        choices_text = ""
        for choice, count in choice_roles.items():
            percentage = (count/total_choices*100) if total_choices > 0 else 0
            choices_text += f"‚Ä¢ **{choice}** : {count} ({percentage:.1f}%)\n"

        if choices_text:
            embed.add_field(
                name="üéØ R√©partition des choix",
                value=choices_text,
                inline=False
            )

        embed.set_footer(text=f"Total membres : {guild.member_count}")
        embed.timestamp = datetime.now()

        await ctx.send(embed=embed)

    @commands.command(name='reset_choice')
    async def reset_choice(self, ctx):
        """Permet √† un utilisateur de changer son choix de communaut√©"""
        user = ctx.author
        guild = ctx.guild

        # Retire tous les r√¥les de choix existants
        choice_role_names = ["üí¨ Discuter", "üòÇ Rigoler", "üéÆ Jouer", "ü§ù Faire des amis", "üìö Apprendre"]
        removed_roles = []

        for role_name in choice_role_names:
            role = discord.utils.get(guild.roles, name=role_name)
            if role and role in user.roles:
                await user.remove_roles(role, reason="Reset du choix de communaut√©")
                removed_roles.append(role_name)

        if removed_roles:
            embed = discord.Embed(
                title="üîÑ Choix r√©initialis√©",
                description=f"Tes anciens r√¥les ont √©t√© supprim√©s : {', '.join(removed_roles)}",
                color=0xf39c12
            )
            embed.add_field(
                name="üéØ Prochaine √©tape",
                value="Va dans le salon **choix-communaut√©** pour faire un nouveau choix !",
                inline=False
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Aucun choix √† r√©initialiser",
                description="Tu n'as pas encore fait de choix de communaut√©.",
                color=0x3498db
            )
            embed.add_field(
                name="üéØ Suggestion",
                value="Va dans le salon **choix-communaut√©** pour faire ton choix !",
                inline=False
            )

        await ctx.send(embed=embed)
        logger.info(f"{user.name} a r√©initialis√© son choix de communaut√©")

    @commands.command(name='setup_onboarding_complete')
    @commands.has_permissions(administrator=True)
    async def setup_complete_onboarding(self, ctx):
        """Configuration compl√®te automatique de l'onboarding"""
        guild = ctx.guild

        # √âtape 1: Cr√©er les salons n√©cessaires
        embed = discord.Embed(
            title="üöÄ Configuration Onboarding Compl√®te",
            description="Cr√©ation automatique des salons et configuration...",
            color=0x3498db
        )
        message = await ctx.send(embed=embed)

        # Cr√©er la cat√©gorie Onboarding
        onboarding_category = discord.utils.get(guild.categories, name="üìã ONBOARDING")
        if not onboarding_category:
            onboarding_category = await guild.create_category(
                "üìã ONBOARDING",
                reason="Cat√©gorie pour l'onboarding automatique"
            )

        # Cr√©er le salon des r√®gles
        rules_channel = discord.utils.get(guild.channels, name="r√®gles")
        if not rules_channel:
            # Permissions pour le salon des r√®gles
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            rules_channel = await guild.create_text_channel(
                "r√®gles",
                category=onboarding_category,
                overwrites=overwrites,
                topic="üìã Accepte les r√®gles pour acc√©der au serveur !",
                reason="Salon des r√®gles automatique"
            )

        # Cr√©er le salon de choix de communaut√©
        choice_channel = discord.utils.get(guild.channels, name="choix-communaut√©")
        if not choice_channel:
            # Permissions pour le salon de choix (seulement membres v√©rifi√©s)
            verified_role = discord.utils.get(guild.roles, name="Membre V√©rifi√©")
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            if verified_role:
                overwrites[verified_role] = discord.PermissionOverwrite(read_messages=True, send_messages=False)

            choice_channel = await guild.create_text_channel(
                "choix-communaut√©",
                category=onboarding_category,
                overwrites=overwrites,
                topic="üåü Dis-nous pourquoi tu es l√† et re√ßois ton r√¥le color√© !",
                reason="Salon de choix de communaut√© automatique"
            )

        # Cr√©er le salon de bienvenue si n√©cessaire
        welcome_channel = discord.utils.get(guild.channels, name="bienvenue")
        if not welcome_channel:
            overwrites = {
                guild.default_role: discord.PermissionOverwrite(read_messages=True, send_messages=False),
                guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }

            welcome_channel = await guild.create_text_channel(
                "bienvenue",
                category=onboarding_category,
                overwrites=overwrites,
                topic="üéâ Messages de bienvenue pour les nouveaux membres !",
                reason="Salon de bienvenue automatique"
            )

        # Configuration automatique
        await self.setup_rules(ctx, rules_channel)
        await self.setup_community_choice(ctx, choice_channel)

        # Configuration du bienvenue
        self.bot.config['channels']['welcome'] = welcome_channel.id
        with open('config.json', 'w', encoding='utf-8') as f:
            json.dump(self.bot.config, f, indent=2, ensure_ascii=False)

        # Message de confirmation final
        final_embed = discord.Embed(
            title="‚úÖ Onboarding Configur√© avec Succ√®s !",
            description="Votre syst√®me d'onboarding complet est maintenant actif ! üéâ",
            color=0x2ecc71
        )

        final_embed.add_field(
            name="üìã Salons cr√©√©s",
            value=f"‚Ä¢ {rules_channel.mention} - R√®gles interactives\n‚Ä¢ {choice_channel.mention} - Choix de communaut√©\n‚Ä¢ {welcome_channel.mention} - Messages de bienvenue",
            inline=False
        )

        final_embed.add_field(
            name="üéØ Fonctionnement",
            value="1. Nouveau membre arrive ‚Üí R√¥le 'Non V√©rifi√©'\n2. Va dans r√®gles ‚Üí Accepte ‚Üí R√¥le 'Membre V√©rifi√©'\n3. Va dans choix-communaut√© ‚Üí Choisit ‚Üí R√¥le color√©",
            inline=False
        )

        final_embed.add_field(
            name="üîß Commandes utiles",
            value="`!onboarding_stats` - Voir les statistiques\n`!verify_member @user` - V√©rifier manuellement\n`!reset_choice` - Changer son choix",
            inline=False
        )

        final_embed.set_footer(text="Syst√®me d'onboarding NINEZ - Pr√™t √† l'emploi !")

        await message.edit(embed=final_embed)
        logger.info(f"Onboarding complet configur√© par {ctx.author.name}")

async def setup(bot):
    await bot.add_cog(Onboarding(bot))
